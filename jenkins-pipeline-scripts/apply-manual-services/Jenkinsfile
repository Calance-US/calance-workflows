/* groovylint-disable CompileStatic */


node('master'){
    stage('Git Checkout'){
        checkout([
            $class: 'GitSCM',
            branches: [[name: '*/407-test-changed-files-from-CWF']],
            extensions: [],
            userRemoteConfigs: [[
                credentialsId: '6e8e3064-2329-46fe-bfa3-b1c54f17e885',
                url: 'https://github.com/Calance-US/calance-services-helm-values.git'
            ]]
        ])
    }
        stage('Find the cluster to which Changed Files will be applied'){
            
                

                    // CHANGED_FILES is the parameter passed to the Job
                    String changedFilePaths = env.CHANGED_FILES
                    String changedFilePathsArray = changedFilePaths.split(',').collect{it as String}
                    def applyOnNutanix = [] as String[changedFilePathsArray.length]
                    

                    int counterNutanix = 0
                    int counterAtcost = 0
                    
                    for (int i = 0; i < changedFilePathsArray.size(); i++){
                        if (changedFilePathsArray[i].contains('jenkins')){

                            // Apply on Nutanix Cluster ie. jenkins-jenkins-agent cloud
                            applyOnNutanix[counterNutanix] = changedFilePathsArray[i]
                            counterNutanix = counterNutanix + 1
                        } else{

                            // Apply on Atcost Cluster ie. atcost-production cloud
                            applyOnAtcost[counterAtcost] = changedFilePathsArray[i]
                            counterAtcost = counterAtcost + 1
                        }
                    }
                        println "Files needed to be applied on Nutanix Cluster: " + applyonNutanix
                        println "Files needed to be applied on Atcost Cluster: " + applyonAtcost
                
            
        }
    
}

// node('jenkins-jenkins-agent'){
    
//         stage('Deploy the Kubernetes Manifests files'){
//             steps{
//                 script{
//                     for(int i=0;i<applyonNutanix.size();i++){
//                         try{
//                             sh("kubectl apply -f ${applyonNutanix[i]}")
//                         } catch(err){
//                             echo err.getMessage()
//                         }
//                     }
                    
//                 }
//             }
//         }
    
// }

// node('atcost-production'){
    
//         stage('Deploy the Kubernetes Manifests files'){
//             steps{
//                 script{
//                     for(int i=0;i<applyonNutanix.size();i++){
//                         try{
//                             sh("kubectl apply -f ${applyonAtcost[i]}")
//                         } catch(err){
//                             echo err.getMessage()
//                         }
//                     }
                    
//                 }
//             }
//         }
    
// }
