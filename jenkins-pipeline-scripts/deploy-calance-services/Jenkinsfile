/* groovylint-disable CompileStatic, VariableName */
String imageName = ''
String imageRepository = ''
String cleanedReleaseName = ''

node('master') {
    stage('Identify Cluster for deployment') {
        configFileProvider([
            configFile(fileId: 'service-cluster-configuration.json', variable: 'CONFIG_FILE')
        ]) {
            Map<String, String> data = readJSON file: "$CONFIG_FILE"
            cloudName = data["$SERVICE_NAME-$CLUSTER_ENVIRONMENT"]

            if (cloudName == null || cloudName == '') {
                error "Cluster config does not exist for $SERVICE_NAME-$CLUSTER_ENVIRONMENT"
            }

            print "For application - $SERVICE_NAME, environment - $CLUSTER_ENVIRONMENT, Chosen cloud - $cloudName"

            // IMAGE_NAME param was added later, so for old workflows
            // to work we get image name from SERVICE_NAME param
            imageName = IMAGE_NAME
            if (imageName == null || imageName == '') {
                imageName = SERVICE_NAME
            }
            print "Image Name -> $imageName"

            // RELEASE_NAME param was added later, so for old workflows
            // to work we get release name from IMAGE_NAME or SERVICE_NAME params
            String releaseName = RELEASE_NAME
            if (releaseName == null || releaseName == '') {
                releaseName = IMAGE_NAME
            }
            if (releaseName == null || releaseName == '') {
                releaseName = SERVICE_NAME
            }

            // decides what is going to be the image repository if it is external or internal service
            String externalService = EXTERNAL_SERVICE
            imageRepository = "ghcr.io/calance-us/${imageName}"

            if (externalService == 'true') {
                imageRepository = IMAGE_NAME
            }

            // helm release names can contain only alphanumeric and hyphen characters
            // cleans the names like this:
            //      "abcd_def__ghi" -> "abcd-def-ghi"
            //      "abcd def  ghi" -> "abcd-def-ghi"
            //      "abcd-def--ghi" -> "abcd-def-ghi"
            //      "abcd-123-!@#-ghi" -> "abcd-123-ghi"
            cleanedReleaseName = releaseName.toLowerCase()
                                            .replaceAll('[-_\\s]+', '-')
                                            .replaceAll('[^a-z0-9-]', '')
                                            /* groovylint-disable-next-line DuplicateStringLiteral */
                                            .replaceAll('-+', '-')
            print "Release Name -> $cleanedReleaseName"
        }
    }
}
node("$cloudName") {
    container('kube-helm') {
        stage('Logging into registry') {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: '6e8e3064-2329-46fe-bfa3-b1c54f17e885', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
                sh "helm registry login -u \$USERNAME -p \$PASSWORD ghcr.io"
            }
        }

        stage('Deploying application') {
            String valuesFilename = "${cleanedReleaseName}-${CLUSTER_ENVIRONMENT}.yml"
            print "For release $cleanedReleaseName, picking values from config file - $valuesFilename"

            checkout([
                $class: 'GitSCM',
                branches: [[name: '*/941-update-helm-container-name']],
                extensions: [],
                userRemoteConfigs: [[
                    credentialsId: '6e8e3064-2329-46fe-bfa3-b1c54f17e885',
                    url: 'https://github.com/Calance-US/calance-services-helm-values.git'
                ]]
            ])

            String application_name = "${cleanedReleaseName}-${CLUSTER_ENVIRONMENT}"

            Map config_json = readJSON file: "${CLUSTER_ENVIRONMENT}/${SERVICE_NAME}/deployment.json"

            String namespace = config_json["${application_name}"]['namespace']

            String helm_chart_version = config_json["${application_name}"]['helm_chart_version']

            String helm_chart_url = config_json["${application_name}"]['helm_chart_url']

            String helm_chart_alias = config_json["${application_name}"]['helm_repo_alias']

            String helm_chart_repo = config_json["${application_name}"]['helm_repo']

            if (helm_chart_repo != null && helm_chart_alias != null) {
                sh("helm repo add ${helm_chart_alias} ${helm_chart_repo} && helm repo update")
            }

            sh("""helm upgrade ${cleanedReleaseName} ${helm_chart_url} \
                    --install \
                    --namespace ${namespace} \
                    --create-namespace \
                    --set image.tag=${VERSION} \
                    --set image.repository=${imageRepository} \
                    --set commitId=${COMMIT_ID} \
                    --values ${CLUSTER_ENVIRONMENT}/${SERVICE_NAME}/${valuesFilename} \
                    --version ${helm_chart_version}"""
            )
        }
    }
}
