name: Run Java Selenium Test Suite

# TODO:
# - define outputs if any required
# - send results to reporting tool
#     - create project if does not exist
#     - convert result files to single json with base4 encoding as required by send-results API
#     - push

on:
  workflow_call:
    inputs:
      browser_name:
        description: "Name of the browser used for running tests. Accepted values - chrome, edge, firefox."
        required: true
        type: string
      browser_version:
        description: "Version of the browser to be installed. Defaults to latest."
        required: false
        type: string
        default: "latest"
      java_version:
        description: "JDK version to be installed."
        required: true
        type: string
      java_distribution:
        description: "JDK distribution to be used. Accepted values - temurin, zulu, adopt, adopt-openj9, liberica, microsoft, corretto, semeru, oracle. Defaults to zulu."
        required: false
        type: string
        default: "zulu"
      results_path:
        description: "Path of the test results directory, relative to the test_suite_path. Defaults to test-results."
        required: false
        type: string
        default: "test-results"
      test_suite_path:
        description: "Path of the java application root of the test suites, relative to the repository root. Defaults to repository root."
        required: false
        type: string
        default: "."

jobs:
  maven-build-project:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ${{ inputs.test_suite_path }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.java_version }}
        distribution: ${{ inputs.java_distribution }}
    - name: Install Browser
      uses: abhi1693/setup-browser@v0.3.4
      with:
        browser: ${{ inputs.browser_name }}
        version: ${{ inputs.browser_version }}
    - name: Run the Test Suite
      run: mvn test
    - name: Publish results
      if: always()
      id: generate-report
      uses: actions/github-script@v6
      with:
        script: |
          const apiUrl = "https://qa-reports.calance.work/allure-api/allure-docker-service/login";

          const loginCredentials = {
            username: ${{ secrets.QA_REPORT_TOOL_ADMIN_USERNAME }},
            password: ${{ secrets.QA_REPORT_TOOL_ADMIN_PASSWORD }}
          };

          async function checkApiStatus() {
            try {
              const response = await fetch(apiUrl, {
                method: 'POST',
                body: JSON.stringify(loginCredentials),
                headers: { 'Content-Type': 'application/json' }
              });

              const statusCode = response.status;

              if (statusCode === 200) {
                console.log('API status is 200. Success!');
              } else {
                console.log(`API status is ${statusCode}. Error occurred.`);
              }
            } catch (error) {
              console.error('Error occurred while hitting the API:', error.message);
            }
          }

          const test = await checkApiStatus();
          console.log(test)
