name: Run Java Selenium Test Suite

# TODO:
# - define outputs if any required
# - send results to reporting tool
#     - create project if does not exist
#     - convert result files to single json with base4 encoding as required by send-results API
#     - push

on:
  workflow_call:
    inputs:
      browser_name:
        description: "Name of the browser used for running tests. Accepted values - chrome, edge, firefox."
        required: true
        type: string
      browser_version:
        description: "Version of the browser to be installed. Defaults to latest."
        required: false
        type: string
        default: "latest"
      java_version:
        description: "JDK version to be installed."
        required: true
        type: string
      java_distribution:
        description: "JDK distribution to be used. Accepted values - temurin, zulu, adopt, adopt-openj9, liberica, microsoft, corretto, semeru, oracle. Defaults to zulu."
        required: false
        type: string
        default: "zulu"
      project_name:
        description: "This refers to the name of the project that goes in allure testing tool."
        required: false
        type: string
        default: "${{ github.event.repository.name }}"
      results_path:
        description: "Path of the test results directory, relative to the test_suite_path. Defaults to test-results."
        required: false
        type: string
        default: "test-results"
      test_suite_path:
        description: "Path of the java application root of the test suites, relative to the repository root. Defaults to repository root."
        required: false
        type: string
        default: "."

    secrets:
      QA_REPORT_TOOL_ADMIN_PASSWORD:
        required: true
        description: "password"
      QA_REPORT_TOOL_ADMIN_USERNAME:
        required: true
        description: "username"


jobs:
  maven-build-project:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    defaults:
      run:
        working-directory: ${{ inputs.test_suite_path }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup JDK
      uses: actions/setup-java@v3
      with:
        java-version: ${{ inputs.java_version }}
        distribution: ${{ inputs.java_distribution }}
    - name: Install Browser
      uses: abhi1693/setup-browser@v0.3.4
      with:
        browser: ${{ inputs.browser_name }}
        version: ${{ inputs.browser_version }}
    - name: Run the Test Suite
      run: mvn test
    - name: creating secrets
      if: always()
      run: |
        echo "password=${{ secrets.QA_REPORT_TOOL_ADMIN_PASSWORD }}" >> $GITHUB_ENV
        echo "username=${{ secrets.QA_REPORT_TOOL_ADMIN_USERNAME }}" >> $GITHUB_ENV
    - name: Publish results
      if: always()
      id: generate-report
      uses: actions/github-script@v6
      with:
        script: "const fs = require('fs');\nconst path = require('path');\n#magic___^_^___line\nconst apiUrl = \"https://qa-reports.calance.work/allure-api/allure-docker-service\";\n#magic___^_^___line\nconst loginCredentials = {\n    username: process.env.username,\n    password: process.env.password\n};\n    #magic___^_^___line\nconst project = \"${{inputs.project_name}}\";\n    #magic___^_^___line\nasync function checkApiStatus() {\n    try {\n        // login feature\n        const response = await fetch(`${apiUrl}/login`, {\n            method: 'POST',\n            body: JSON.stringify(loginCredentials),\n            headers: { 'Content-Type': 'application/json' }\n        });\n            #magic___^_^___line\n        const statusCode = response.status;\n            #magic___^_^___line\n        if (statusCode === 200) {\n            console.log('API status is 200. Success!');\n            const cookies = response.headers.get('set-cookie')\n            #magic___^_^___line\n            // console.log(cookies.split('Secure;'))\n            const lines = cookies.split(\";\");\n            const filteredLines = lines.filter(line => !line.includes(\"Secure\") && !line.includes(\"HttpOnly\"));\n            #magic___^_^___line\n            const cookieArray = filteredLines.map(value => {\n                let newVal = value.replace(' Path=/,', '')\n                newVal = value.replace(' Path=/', '')\n                #magic___^_^___line\n                return newVal;\n            });\n            let finalCookie = cookieArray.join(\"\")\n            finalCookie = finalCookie.replaceAll(\",\", \";\")\n                #magic___^_^___line\n            //get projects\n                #magic___^_^___line\n            const resp = await fetch(`${apiUrl}/projects`, {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json', 'cookie': finalCookie },\n            });\n                #magic___^_^___line\n            if (resp.status !== 200) {\n              console.log(data.meta_data)\n            } else {\n              console.log(data.meta_data)\n            }\n            const data = await resp.json()\n            // console.log(data.data.projects)\n            const projects = data.data.projects\n                #magic___^_^___line\n            keys = Object.keys(projects)\n                #magic___^_^___line\n            const exists = keys.some(key => projects[key] === project);\n            console.log(exists)\n            const match = finalCookie.match(/csrf_access_token=([^;]+)/);\n            const csrfAccessToken = match[1];\n                #magic___^_^___line\n            if (!exists) {\n                //create project\n                const res = await fetch(`${apiUrl}/projects`, {\n                    method: 'POST',\n                    body: JSON.stringify({\n                        id: project\n                    }),\n                    headers: { 'Content-Type': 'application/json', 'cookie': finalCookie, 'X-CSRF-TOKEN': csrfAccessToken }\n                });\n                        #magic___^_^___line\n                // const result = await response.json()\n            } else {\n                console.log(\"Project exists\")\n            }\n                        #magic___^_^___line\n            const folderPath = \"./${{ inputs.results_path }}\";\n            console.log(process.cwd())\n                        #magic___^_^___line\n            fs.readdir(\".\", (err, files) => {\n              files.forEach(file => {\n                console.log(file);\n              });\n            });\n                        #magic___^_^___line\n            fs.readdir(folderPath, (err, files) => {\n                if (err) {\n                    console.error('Error reading folder:', err);\n                    return;\n                }\n                const results = []\n                files.forEach((file) => {\n                    console.log(file)\n                    const filePath = path.join(folderPath, file);\n                    const extension = filePath.split('.').pop().toLowerCase();\n                    if (extension !== 'json' && extension !== 'xml'){\n                        return\n                    }\n                        #magic___^_^___line\n                    let encodedData = {}\n                    fs.readFile(filePath, 'utf8', async (err, data) => {\n                        if (err) {\n                            console.error('Error reading file:', err);\n                            return;\n                        }\n                            #magic___^_^___line\n                        const buffer = Buffer.from(data, 'utf8');\n                            #magic___^_^___line\n                        const base64Data = buffer.toString('base64');\n                            #magic___^_^___line\n                        // console.log(base64Data);\n                            #magic___^_^___line\n                        results.push({\n                            content_base64: base64Data,\n                            file_name: file,\n                        });\n                            #magic___^_^___line\n                        if (results.length === files.length) {\n                            const output = {\n                                results: results,\n                            };\n                                #magic___^_^___line\n                        const filesData = JSON.stringify(output)\n                        // console.log(filesData)\n                        console.log(csrfAccessToken)\n                                #magic___^_^___line\n                        const res = await fetch(`${apiUrl}/send-results?project_id=${project}&force_project_creation=false`, {\n                            method: 'POST',\n                            body: filesData,\n                            headers: { 'Content-Type': 'application/json', 'cookie': finalCookie, 'X-CSRF-TOKEN': csrfAccessToken }\n                        });\n                                #magic___^_^___line\n                        // console.log(res)\n                        }\n                    });   \n                });\n            });\n            const report = await fetch(`${apiUrl}/generate-report?project_id=${project}`, {\n                method: 'GET',\n                headers: { 'Content-Type': 'application/json', 'cookie': finalCookie },\n            });\n            const generatedReprot = await report.json()\n            console.log(generatedReprot)\n                                #magic___^_^___line\n        } else {\n            console.log(`API status is ${statusCode}. data is  Error occurred.`);\n        }\n    } catch (error) {\n        console.error('Error occurred while hitting the API:', error);\n    }\n}\n                                #magic___^_^___line\n"
